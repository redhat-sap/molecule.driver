---
#
# Copyright 2022 Red Hat, Project Atmosphere
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU
# General Public License as published by the Free Software Foundation, version 3 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.

# How to create Azure instances for molecule some examples
# https://github.com/erjosito/ansible-azure-lab/blob/master/new_vm_web.yml
# https://github.com/datwiz/molecule-azure-example
# https://github.com/Azure-Samples/ansible-playbooks/blob/master/vm_create_ssh.yml
# https://github.com/jonashackt/molecule-ansible-azure
# https://github.com/microsoft/AnsibleLabs/blob/master/lab-01-mattermost-app-deploy-mysql-image-vmss-ag/mm-01-vm-deploy.yml
# https://github.com/ScruffyFurn/azure_molecule_example/blob/main/molecule_templates/new_linux_azure_role_template/%7B%7Bcookiecutter.role_name%7D%7D/molecule/default/create.yml
# https://docs.microsoft.com/en-us/azure/developer/ansible/vm-configure-windows?tabs=ansible
# https://docs.microsoft.com/en-us/azure/developer/ansible/vm-configure?tabs=ansible

- name: Get info for resource group
  azure.azcollection.azure_rm_resourcegroup_info:
    name: "{{ item.resourcegroup_name |
      default (azure_rm_resourcegroup_name_default) }}"
  register: _

- name: Create resource group
  azure.azcollection.azure_rm_resourcegroup:
    name: "{{ item.resourcegroup_name |
      default(azure_rm_resourcegroup_name_default) }}"
    location: "{{ item.location }}"
  when: not (_.resourcegroups | length)

- name: Create virtual network for molecule
  azure.azcollection.azure_rm_virtualnetwork:
    resource_group: "{{ item.resourcegroup_name |
      default(azure_rm_resourcegroup_name_default) }}"
    name: "{{ item.virtualnetwork_name |
      default(azure_rm_virtualnetwork_name_default) }}"
    address_prefixes: "{{ item.virtualnetwork_address_prefixes |
      default(azure_rm_virtualnetwork_address_prefixes_default) }}"

- name: Create subnet
  azure.azcollection.azure_rm_subnet:
    resource_group: "{{ item.resourcegroup_name |
      default(azure_rm_resourcegroup_name_default) }}"
    name: "{{ item.subnet_name |
      default(azure_rm_subnet_name_default) }}"
    address_prefix_cidr: "{{ item.subnet_address_prefix_cidr |
      default(azure_rm_subnet_address_prefix_cidr_default) }}"
    virtual_network_name: "{{ item.virtualnetwork_name |
      default(azure_rm_virtualnetwork_name_default) }}"

- name: Create instance
  azure.azcollection.azure_rm_virtualmachine:
    resource_group: "{{ item.resourcegroup_name | default(azure_rm_resourcegroup_name_default) }}"
    location: "{{ item.location | default(omit) }}" # omit - location will be from resource group
    name: "{{ item.name }}"
    priority: "{{ item.priority | default(azure_rm_priority_default) }}"
    eviction_policy: "{% if item.priority is defined %}{{ item.eviction_policy | default(azure_rm_eviction_policy_default) }}{% else %}{{ omit }}{% endif %}"
    vm_size: "{{ item.vm_size }}"
    zones: "{{ item.zones | default([]) }}"
    managed_disk_type: "{{ item.managed_disk_type | default('Premium_LRS') }}"
    # TODO: add default managed disk type to defaults
    admin_username: "{{ item.ssh_user | default(azure_rm_ssh_user_default) }}"
    public_ip_allocation_method: "{{ item.public_ip_allocation_method |
      default(public_ip_allocation_method_default) }}"
    ssh_password_enabled: false
    ssh_public_keys:
      - path: "/home/{{ item.ssh_user | default(azure_rm_ssh_user_default) }}/.ssh/authorized_keys"
        key_data: "{{ lookup('file', ssh_public_key_path |
          default(ssh_public_key_path_default)) }}"
    image: "{{ item.marketplace_image }}"
    license_type: "{{ item.license_type | default(omit) }}"
    plan: "{{ item.plan | default(omit) }}"
    state: started
  register: server
  # with_items: "{{ molecule_yml.platforms }}"
  # TODO create async job in instance_create.yml and wait for all jobs to finish in create.yaml
  # see example how to work with async jobs in the loop
  # https://gist.github.com/guoqiao/28b18253a1abdb902858e2d733ca90c3
  async: "{{ azure_rm_virtualmachine_async_default }}"
  poll: "{{ azure_rm_virtualmachine_poll_default }}"

# - name: Print Azure job server.results
#   ansible.builtin.debug:
#     msg: "{{ server }}"

# - name: Wait for instance(s) creation to complete
#   ansible.builtin.async_status:
#     jid: "{{ item.ansible_job_id }}"
#   register: azure_jobs
#   until: azure_jobs.finished
#   retries: 300
#   with_items: "{{ server.results }}"

# - name: Print Azure job azure_jobs.results
#   ansible.builtin.debug:
#     msg: "{{ azure_jobs.results }}"

- name: Return array with inventory parameters
  ansible.builtin.set_fact:
    azure_molecule_servers:
      results: "{{ azure_molecule_servers.results +
        [{
        'instance': item.name,
        'address': server.ansible_facts.azure_vm.properties.networkProfile.networkInterfaces[0].properties.ipConfigurations[0].properties.publicIPAddress.properties.ipAddress,
        'user': item.ssh_user | default(azure_rm_ssh_user_default),
        'port': 22,
        'identity_file': item.ssh_private_key_path |
          default (ssh_private_key_path_default)
        }] }}"
      changed: true
